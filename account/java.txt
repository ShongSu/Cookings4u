import java.io.*;
import java.util.*;


public class PointMatch {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		   PointMatch intrl=new PointMatch();
		   BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		   //System.out.println("请输入测试例个数:");
		   String str=br.readLine();
		   int m=Integer.parseInt(str);
		   intrl.Test(m);
	}
	 public void Test(int m)
	     {
	         int[] result=new int[m];
	         for(int i=0;i<m;i++)
	         {
	             try
	             {
	                 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	                 //System.out.println("总测试例个数为"+m+",现请输入第"+(i+1)+"个用例:(m n)");
	                 
	                 String str0=br.readLine();
	                 String[] str1=str0.split(" ");
	                 int nb=Integer.parseInt(str1[0]);
	                 int nw=Integer.parseInt(str1[1]);
	                 //System.out.println("黑点"+nb+",白点"+nw);

	                 String[] strBlack = new String[nb*2];
	                 String[] strWhite = new String[nw*2];
	                 //System.out.println("请依次输入黑点坐标：("+nb+"行)");

	                 for(int k=0;k<nb;k++)
	                 {
		                 String strTemp=br.readLine();
		                 String[] strb=strTemp.split(" ");
		                 strBlack[2*k] = strb[0];
		                 strBlack[2*k+1] = strb[1];
	                 }
	                 //System.out.println("请依次输入黑点坐标：("+nw+"行)");

	                 for(int k=0;k<nw;k++)
	                 {
		                 String strTemp=br.readLine();
		                 String[] strw=strTemp.split(" ");
		                 strWhite[2*k] = strw[0];
		                 strWhite[2*k+1] = strw[1];
	                 }
	
	                 
	                 Vector b=new Vector();
	                 Vector w=new Vector();
	                 for(int j=0;j<nb;j++)
	                 {
	                     b.add(j,new MyPoint(Float.parseFloat(strBlack[2*j]),Float.parseFloat(strBlack[2*j+1])));
	                 }
	                 for(int j=0;j<nw;j++)
	                 {
	                     w.add(j,new MyPoint(Float.parseFloat(strWhite[2*j]),Float.parseFloat(strWhite[2*j+1])));
	                 }

	                 result[i]=WB(w,b);
	             }
	             catch(IOException e)
	             {
	                 System.out.println(e);
	             }
	         }
	         System.out.println();
	        //System.out.println("结果：");
	         for(int r=0;r<m;r++)
	        {
	             System.out.println(result[r]);
	         }
	     }
	     public static int WB(Vector w,Vector b)/*核心算法*/
	     {
	         Collections.sort(w,new MyPoint.MyPointComparatorByXAC());
	         Collections.sort(b,new MyPoint.MyPointComparatorByXAC());
	         int pp=0;
        
        for(int i=w.size()-1;i>=0;i--)
	         {
	             MyPoint gpp=new MyPoint(-32768,-32768);
	             for(int j=b.size()-1;j>=0;j--)
	             {
	                MyPoint mb=(MyPoint)b.get(j);
	                MyPoint mw=(MyPoint)w.get(i);
	                if(mb.getX()>mw.getX())
	                 {
	                     break;
	                 }
	                 if(mb.getY()>mw.getY())
	                 {
	                     continue;
	                 }
	                 if(gpp.getY()==-32768)
	                 {
	                     gpp=mb;
	                }
	                 else
	                 {
	                    if(gpp.getY()>mb.getY())
	                    {
	                        gpp=mb;
	                    }
	                 }
	             }
	            if(gpp.getY()!=-32768)
	             {
	                 pp++;
	             }
	         }
	         return pp;
	    }
	}
	
	class MyPoint //implements Comparable
	{
	    private float x;
	    private float y;
	    public void setX(float x)
	    {
	        this.x=x;
	    }
	    public float getX()
	    {
	        return x;
	    }
	    public void setY(float y)
	    {
	        this.y=y;
	    }
	    public float getY()
	    {
	        return y;
	    }
	   public MyPoint()
	    {
	    }
	    public MyPoint(float x,float y)
	    {
        this.x=x;
	       this.y=y;
	   }
	    public static class MyPointComparatorByXAC implements Comparator
	    {
	        public int compare(Object o1,Object o2)
	       {
	            MyPoint p1=(MyPoint)o1;
	            MyPoint p2=(MyPoint)o2;
//	            int result=(p1.getX()>p2.getX())?1:(p1.getX()==p2.getX()?0:-1);
	            int result=(p1.getX()>p2.getX())?1:(p1.getX()==p2.getX()?0:-1);

	            return result;
	        }
	    }


}
